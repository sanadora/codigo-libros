#!/bin/bash

# Program to output a system information page

PROGNAME=$(basename $0)
TITLE="System Information Report For $HOSTNAME"
CURRENT_TIME=$(date +"%x %r %Z")
TIMESTAMP="Generated $CURRENT_TIME, by $USER"

function report_uptime() {
  cat<<EOF
<h2>System Uptime</h2>
<pre>$(uptime)</pre>
EOF
}


function report_disk_space() {
cat <<EOF
<h2>Disk Space Utilization</h2>
<pre>$(df -h)</pre>
EOF
}

function report_home_space() {
  if [ $(id -u) -eq 0 ]; then
    cat <<EOF
<h2>Home Space Utilization (All Users)</h2>
<pre>$(du -sh /home/*)</pre>
EOF
  else
    cat <<EOF
<h2>Home Space Utilization ($USER)</h2>
<pre>$(du -sh $HOME)</pre>
EOF
  fi
  return
}

function write_html_page() {
  cat <<EOF  
<html>
   <head>
      <title>$TITLE</title>
   </head>
   <body>
      <h1>$TITLE</h1>
      <p>$TIMESTAMP</p>
      $(report_uptime)
      $(report_disk_space)
      $(report_home_space)
   </body>
</html>
EOF
}


function usage() {
  echo "$PROGNAME: usage: $PROGNAME [-f file | -i]"
  return
}

# process command line options

interactive=
filename=

while [[ -n $1 ]]; do
  case $1 in
    -f | --file)
      shift
      filename=$1
      ;;
    -i | --interactive)
      interactive=1
      ;;
    -h | --help)
      usage
      exit
      ;;
    *)
      usage >&2
      exit 1
  esac
  shift
done


# interactive mode

if [[ -n $interactive  ]]; then
  while true; do
    read -p "Enter name of output file: " filename
    if [[ -e $filename ]]; then
      read -p "'$filename' already exists. Overwrite? [y/n/q] > "
      case $REPLY in
        y|Y)
          break
          ;;
        q|Q)
          echo "Program terminated."
          exit
          ;;
        *)
          continue
      esac
    elif [[ -z $filename ]]; then
      continue
    else
      break
    fi
  done
fi


# output htmml page

if [[ -n $filename  ]]; then
  if touch $filename && [[ -f $filename ]]; then
    write_html_page > $filename
  else
    echo "$PROGNAME: Cannot write file '$filename'" >&2
    exit 1
  fi
else
  write_html_page
fi
